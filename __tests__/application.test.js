// ********RoostGPT********
/*
Application Test generated by RoostGPT for test NodeJS-application using AI Type Open AI and AI Model gpt-4o


*/

// ********RoostGPT********
const request = require('supertest');
const app = require('../src/app');
const mongoose = require('mongoose');
const ProductModel = require('../src/model/product');

afterAll((done) => {
  mongoose.connection.close();
  done();
});

describe('GET /', () => {
  it('should return the home page with APIs list', async () => {
    const res = await request(app)
      .get('/')
      .expect('Content-Type', /html/)
      .expect(200);
    expect(res.text).toContain('Node JS Simple Restful by Irfan Maulana');
  });
});

describe('Product API', () => {
  let productId;

  beforeAll(async () => {
    const product = new ProductModel({
      title: 'Test Product',
      description: 'Test Description',
      price: 10,
      modified: new Date()
    });
    const savedProduct = await product.save();
    productId = savedProduct._id;
  });

  afterAll(async () => {
    await ProductModel.deleteOne({ _id: productId });
  });

  describe('GET /api/products', () => {
    it('should return all products', async () => {
      const res = await request(app)
        .get('/api/products')
        .expect('Content-Type', /json/)
        .expect(200);
      expect(res.body.result).toBe(true);
      expect(res.body.products.length).toBeGreaterThan(0);
    });
  });

  describe('POST /api/products', () => {
    it('should insert a new product', async () => {
      const newProduct = {
        title: 'Another Test Product',
        description: 'Another Test Description',
        price: 20
      };
      const res = await request(app)
        .post('/api/products')
        .send(newProduct)
        .expect('Content-Type', /json/)
        .expect(200);
      expect(res.body.result).toBe(true);
      expect(res.body.product._id).toBeDefined();
    });
  });

  describe('PUT /api/products/:id', () => {
    it('should update a product by ID', async () => {
      const updatedProduct = {
        title: 'Updated Test Product',
        description: 'Updated Test Description',
        price: 30
      };
      const res = await request(app)
        .put(`/api/products/${productId}`)
        .send(updatedProduct)
        .expect('Content-Type', /json/)
        .expect(200);
      expect(res.body.result).toBe(true);
    });
  });

  describe('DELETE /api/products/:id', () => {
    it('should delete a product by ID', async () => {
      const res = await request(app)
        .delete(`/api/products/${productId}`)
        .expect('Content-Type', /json/)
        .expect(200);
      expect(res.body.result).toBe(true);
    });
  });
});

describe('GET /app', () => {
  it('should render the app page with products', async () => {
    const res = await request(app)
      .get('/app')
      .expect('Content-Type', /html/)
      .expect(200);
    expect(res.text).toContain('Product List');
  });
});

describe('GET /app/form', () => {
  it('should render the new product form', async () => {
    const res = await request(app)
      .get('/app/form')
      .expect('Content-Type', /html/)
      .expect(200);
    expect(res.text).toContain('New Product');
  });
});

describe('GET /app/form/:id', () => {
  it('should render the edit product form', async () => {
    const res = await request(app)
      .get(`/app/form/${productId}`)
      .expect('Content-Type', /html/)
      .expect(200);
    expect(res.text).toContain('Edit Product');
  });
});

describe('GET /angularapp', () => {
  it('should render the Angular app page', async () => {
    const res = await request(app)
      .get('/angularapp')
      .expect('Content-Type', /html/)
      .expect(200);
    expect(res.text).toContain('<div ng-app="myApp">');
  });
});

describe('GET /vueapp', () => {
  it('should render the Vue app page', async () => {
    const res = await request(app)
      .get('/vueapp')
      .expect('Content-Type', /html/)
      .expect(200);
    expect(res.text).toContain('<div id="app">');
  });
});

